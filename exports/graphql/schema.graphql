type AdminUser {
  id: ID!
  username: String
}

type AppBasicInformation {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  app_version: String
  version_check: Boolean
  android_app_version: String
  android_version_check: Boolean
  iso_app_version: String
  ios_version_check: Boolean
  created_by: AdminUser
  updated_by: AdminUser
}

input AppBasicInformationInput {
  app_version: String
  version_check: Boolean
  android_app_version: String
  android_version_check: Boolean
  iso_app_version: String
  ios_version_check: Boolean
  created_by: ID
  updated_by: ID
}

type AvailableVouchers {
  vouchers: [Vouchers]
  AvailedVouchers: [VoucherAvailed]!
}

input BannerInput {
  banner_img: ID
  created_by: ID
  updated_by: ID
}

type Banners {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  banner_img: UploadFile
  created_by: AdminUser
  updated_by: AdminUser
}

type BannersAggregator {
  count: Int
  totalCount: Int
}

type BannersConnection {
  values: [Banners]
  groupBy: BannersGroupBy
  aggregate: BannersAggregator
}

type BannersConnectionBanner_img {
  key: ID
  connection: BannersConnection
}

type BannersConnectionCreated_at {
  key: DateTime
  connection: BannersConnection
}

type BannersConnectionCreated_by {
  key: ID
  connection: BannersConnection
}

type BannersConnectionId {
  key: ID
  connection: BannersConnection
}

type BannersConnectionUpdated_at {
  key: DateTime
  connection: BannersConnection
}

type BannersConnectionUpdated_by {
  key: ID
  connection: BannersConnection
}

type BannersGroupBy {
  id: [BannersConnectionId]
  created_at: [BannersConnectionCreated_at]
  updated_at: [BannersConnectionUpdated_at]
  banner_img: [BannersConnectionBanner_img]
  created_by: [BannersConnectionCreated_by]
  updated_by: [BannersConnectionUpdated_by]
}

type BasicMembershipAmount {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  currency_code: String
  amount: Int
  multiplier: Int
  created_by: AdminUser
  updated_by: AdminUser
}

input BasicMembershipAmountInput {
  currency_code: String
  amount: Int
  multiplier: Int
  created_by: ID
  updated_by: ID
}

type Categories {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title_en: String
  featured_img: UploadFile
  title_ar: String
  enabled: Boolean!
  created_by: AdminUser
  updated_by: AdminUser
}

type CategoriesAggregator {
  count: Int
  totalCount: Int
}

type CategoriesConnection {
  values: [Categories]
  groupBy: CategoriesGroupBy
  aggregate: CategoriesAggregator
}

type CategoriesConnectionCreated_at {
  key: DateTime
  connection: CategoriesConnection
}

type CategoriesConnectionCreated_by {
  key: ID
  connection: CategoriesConnection
}

type CategoriesConnectionEnabled {
  key: Boolean
  connection: CategoriesConnection
}

type CategoriesConnectionFeatured_img {
  key: ID
  connection: CategoriesConnection
}

type CategoriesConnectionId {
  key: ID
  connection: CategoriesConnection
}

type CategoriesConnectionTitle_ar {
  key: String
  connection: CategoriesConnection
}

type CategoriesConnectionTitle_en {
  key: String
  connection: CategoriesConnection
}

type CategoriesConnectionUpdated_at {
  key: DateTime
  connection: CategoriesConnection
}

type CategoriesConnectionUpdated_by {
  key: ID
  connection: CategoriesConnection
}

type CategoriesGroupBy {
  id: [CategoriesConnectionId]
  created_at: [CategoriesConnectionCreated_at]
  updated_at: [CategoriesConnectionUpdated_at]
  title_en: [CategoriesConnectionTitle_en]
  featured_img: [CategoriesConnectionFeatured_img]
  title_ar: [CategoriesConnectionTitle_ar]
  enabled: [CategoriesConnectionEnabled]
  created_by: [CategoriesConnectionCreated_by]
  updated_by: [CategoriesConnectionUpdated_by]
}

input CategoryInput {
  title_en: String
  featured_img: ID
  title_ar: String
  enabled: Boolean
  created_by: ID
  updated_by: ID
}

type CenterCheckIn {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  user_id: UsersPermissionsUser
  center: Centers
  membership: Membership
  transaction_id: String
  discounted_price: Int
  original_price: Int
  discount: Int
  offer_id: Offers
  created_by: AdminUser
  updated_by: AdminUser
}

type CenterCheckInAggregator {
  count: Int
  totalCount: Int
  sum: CenterCheckInAggregatorSum
  avg: CenterCheckInAggregatorAvg
  min: CenterCheckInAggregatorMin
  max: CenterCheckInAggregatorMax
}

type CenterCheckInAggregatorAvg {
  discounted_price: Float
  original_price: Float
  discount: Float
}

type CenterCheckInAggregatorMax {
  discounted_price: Float
  original_price: Float
  discount: Float
}

type CenterCheckInAggregatorMin {
  discounted_price: Float
  original_price: Float
  discount: Float
}

type CenterCheckInAggregatorSum {
  discounted_price: Float
  original_price: Float
  discount: Float
}

type CenterCheckInConnection {
  values: [CenterCheckIn]
  groupBy: CenterCheckInGroupBy
  aggregate: CenterCheckInAggregator
}

type CenterCheckInConnectionCenter {
  key: ID
  connection: CenterCheckInConnection
}

type CenterCheckInConnectionCreated_at {
  key: DateTime
  connection: CenterCheckInConnection
}

type CenterCheckInConnectionCreated_by {
  key: ID
  connection: CenterCheckInConnection
}

type CenterCheckInConnectionDiscount {
  key: Int
  connection: CenterCheckInConnection
}

type CenterCheckInConnectionDiscounted_price {
  key: Int
  connection: CenterCheckInConnection
}

type CenterCheckInConnectionId {
  key: ID
  connection: CenterCheckInConnection
}

type CenterCheckInConnectionMembership {
  key: ID
  connection: CenterCheckInConnection
}

type CenterCheckInConnectionOffer_id {
  key: ID
  connection: CenterCheckInConnection
}

type CenterCheckInConnectionOriginal_price {
  key: Int
  connection: CenterCheckInConnection
}

type CenterCheckInConnectionTransaction_id {
  key: String
  connection: CenterCheckInConnection
}

type CenterCheckInConnectionUpdated_at {
  key: DateTime
  connection: CenterCheckInConnection
}

type CenterCheckInConnectionUpdated_by {
  key: ID
  connection: CenterCheckInConnection
}

type CenterCheckInConnectionUser_id {
  key: ID
  connection: CenterCheckInConnection
}

type CenterCheckInGroupBy {
  id: [CenterCheckInConnectionId]
  created_at: [CenterCheckInConnectionCreated_at]
  updated_at: [CenterCheckInConnectionUpdated_at]
  user_id: [CenterCheckInConnectionUser_id]
  center: [CenterCheckInConnectionCenter]
  membership: [CenterCheckInConnectionMembership]
  transaction_id: [CenterCheckInConnectionTransaction_id]
  discounted_price: [CenterCheckInConnectionDiscounted_price]
  original_price: [CenterCheckInConnectionOriginal_price]
  discount: [CenterCheckInConnectionDiscount]
  offer_id: [CenterCheckInConnectionOffer_id]
  created_by: [CenterCheckInConnectionCreated_by]
  updated_by: [CenterCheckInConnectionUpdated_by]
}

input CenterCheckInInput {
  user_id: ID
  center: ID
  membership: ID
  transaction_id: String
  discounted_price: Int
  original_price: Int
  discount: Int
  offer_id: ID
  created_by: ID
  updated_by: ID
}

input CenterInput {
  title_en: String!
  title_ar: String!
  category: ID
  featured_img: ID
  mobile_number: Long
  place: String!
  city: ENUM_CENTERS_CITY
  homescreen: Boolean
  offers: [ID]
  partner: ID
  favourites: [ID]
  created_by: ID
  updated_by: ID
}

type CenterProfile {
  counts: JSON!
  offers: [Offers]
  recentUsers: [UserPayload]
  center: Centers
}

type Centers {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title_en: String!
  title_ar: String!
  category: Categories
  featured_img: UploadFile
  mobile_number: Long
  place: String!
  city: ENUM_CENTERS_CITY
  homescreen: Boolean
  partner: Partner
  created_by: AdminUser
  updated_by: AdminUser
  offers(sort: String, limit: Int, start: Int, where: JSON): [Offers]
  favourites(sort: String, limit: Int, start: Int, where: JSON): [Favourites]
}

type CentersAggregator {
  count: Int
  totalCount: Int
}

type CentersConnection {
  values: [Centers]
  groupBy: CentersGroupBy
  aggregate: CentersAggregator
}

type CentersConnectionCategory {
  key: ID
  connection: CentersConnection
}

type CentersConnectionCity {
  key: String
  connection: CentersConnection
}

type CentersConnectionCreated_at {
  key: DateTime
  connection: CentersConnection
}

type CentersConnectionCreated_by {
  key: ID
  connection: CentersConnection
}

type CentersConnectionFeatured_img {
  key: ID
  connection: CentersConnection
}

type CentersConnectionHomescreen {
  key: Boolean
  connection: CentersConnection
}

type CentersConnectionId {
  key: ID
  connection: CentersConnection
}

type CentersConnectionMobile_number {
  key: ID
  connection: CentersConnection
}

type CentersConnectionPartner {
  key: ID
  connection: CentersConnection
}

type CentersConnectionPlace {
  key: String
  connection: CentersConnection
}

type CentersConnectionTitle_ar {
  key: String
  connection: CentersConnection
}

type CentersConnectionTitle_en {
  key: String
  connection: CentersConnection
}

type CentersConnectionUpdated_at {
  key: DateTime
  connection: CentersConnection
}

type CentersConnectionUpdated_by {
  key: ID
  connection: CentersConnection
}

type CentersGroupBy {
  id: [CentersConnectionId]
  created_at: [CentersConnectionCreated_at]
  updated_at: [CentersConnectionUpdated_at]
  title_en: [CentersConnectionTitle_en]
  title_ar: [CentersConnectionTitle_ar]
  category: [CentersConnectionCategory]
  featured_img: [CentersConnectionFeatured_img]
  mobile_number: [CentersConnectionMobile_number]
  place: [CentersConnectionPlace]
  city: [CentersConnectionCity]
  homescreen: [CentersConnectionHomescreen]
  partner: [CentersConnectionPartner]
  created_by: [CentersConnectionCreated_by]
  updated_by: [CentersConnectionUpdated_by]
}

input createBannerInput {
  data: BannerInput
}

type createBannerPayload {
  banner: Banners
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Categories
}

input createCenterCheckInInput {
  data: CenterCheckInInput
}

type createCenterCheckInPayload {
  centerCheckIn: CenterCheckIn
}

input createCenterInput {
  data: CenterInput
}

type createCenterPayload {
  center: Centers
}

input createFavouriteInput {
  data: FavouriteInput
}

type createFavouritePayload {
  favourite: Favourites
}

input createGiftAvailedInput {
  data: GiftAvailedInput
}

type createGiftAvailedPayload {
  giftAvailed: GiftAvailed
}

input createGiftInput {
  data: GiftInput
}

type createGiftPayload {
  gift: Gifts
}

input createGiftTypeInput {
  data: GiftTypeInput
}

type createGiftTypePayload {
  giftType: GiftType
}

input createMembershipInput {
  data: MembershipInput
}

type createMembershipPayload {
  membership: Membership
}

input createMembershipPlanInput {
  data: MembershipPlanInput
}

type createMembershipPlanPayload {
  membershipPlan: MembershipPlans
}

input createMembershipTransactionInput {
  data: MembershipTransactionInput
}

type createMembershipTransactionPayload {
  membershipTransaction: MembershipTransactions
}

input createNotificationInput {
  data: NotificationInput
}

type createNotificationPayload {
  notification: Notifications
}

input createOfferInput {
  data: OfferInput
}

type createOfferPayload {
  offer: Offers
}

input createPartnerInput {
  data: PartnerInput
}

type createPartnerPayload {
  partner: Partner
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Products
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSpecialistInput {
  data: SpecialistInput
}

type createSpecialistPayload {
  specialist: Specialist
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

type CreateUserPayload {
  jwt: String
  user: UsersPermissionsUser!
}

input createVoucherAvailedInput {
  data: VoucherAvailedInput
}

type createVoucherAvailedPayload {
  voucherAvailed: VoucherAvailed
}

input createVoucherInput {
  data: VoucherInput
}

type createVoucherPayload {
  voucher: Vouchers
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type deleteAppBasicInformationPayload {
  appBasicInformation: AppBasicInformation
}

input deleteBannerInput {
  where: InputID
}

type deleteBannerPayload {
  banner: Banners
}

type deleteBasicMembershipAmountPayload {
  basicMembershipAmount: BasicMembershipAmount
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Categories
}

input deleteCenterCheckInInput {
  where: InputID
}

type deleteCenterCheckInPayload {
  centerCheckIn: CenterCheckIn
}

input deleteCenterInput {
  where: InputID
}

type deleteCenterPayload {
  center: Centers
}

input deleteFavouriteInput {
  where: InputID
}

type deleteFavouritePayload {
  favourite: Favourites
}

input deleteGiftAvailedInput {
  where: InputID
}

type deleteGiftAvailedPayload {
  giftAvailed: GiftAvailed
}

input deleteGiftInput {
  where: InputID
}

type deleteGiftPayload {
  gift: Gifts
}

input deleteGiftTypeInput {
  where: InputID
}

type deleteGiftTypePayload {
  giftType: GiftType
}

type deleteMembershipBenefitPayload {
  membershipBenefit: MembershipBenefits
}

type deleteMembershipCardInfoPayload {
  membershipCardInfo: MembershipCardInfo
}

input deleteMembershipInput {
  where: InputID
}

type deleteMembershipPayload {
  membership: Membership
}

input deleteMembershipPlanInput {
  where: InputID
}

type deleteMembershipPlanPayload {
  membershipPlan: MembershipPlans
}

input deleteMembershipTransactionInput {
  where: InputID
}

type deleteMembershipTransactionPayload {
  membershipTransaction: MembershipTransactions
}

input deleteNotificationInput {
  where: InputID
}

type deleteNotificationPayload {
  notification: Notifications
}

input deleteOfferInput {
  where: InputID
}

type deleteOfferPayload {
  offer: Offers
}

input deletePartnerInput {
  where: InputID
}

type deletePartnerPayload {
  partner: Partner
}

type deletePrivacyPolicyPayload {
  privacyPolicy: PrivacyPolicy
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Products
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type deleteSpecialistHelpPayload {
  specialistHelp: SpecialistHelp
}

input deleteSpecialistInput {
  where: InputID
}

type deleteSpecialistPayload {
  specialist: Specialist
}

type deleteTermsAndConditionPayload {
  termsAndCondition: TermsAndConditions
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input deleteVoucherAvailedInput {
  where: InputID
}

type deleteVoucherAvailedPayload {
  voucherAvailed: VoucherAvailed
}

input deleteVoucherInput {
  where: InputID
}

type deleteVoucherPayload {
  voucher: Vouchers
}

type deleteVoucherRulePayload {
  voucherRule: VoucherRules
}

input editAppBasicInformationInput {
  app_version: String
  version_check: Boolean
  android_app_version: String
  android_version_check: Boolean
  iso_app_version: String
  ios_version_check: Boolean
  created_by: ID
  updated_by: ID
}

input editBannerInput {
  banner_img: ID
  created_by: ID
  updated_by: ID
}

input editBasicMembershipAmountInput {
  currency_code: String
  amount: Int
  multiplier: Int
  created_by: ID
  updated_by: ID
}

input editCategoryInput {
  title_en: String
  featured_img: ID
  title_ar: String
  enabled: Boolean
  created_by: ID
  updated_by: ID
}

input editCenterCheckInInput {
  user_id: ID
  center: ID
  membership: ID
  transaction_id: String
  discounted_price: Int
  original_price: Int
  discount: Int
  offer_id: ID
  created_by: ID
  updated_by: ID
}

input editCenterInput {
  title_en: String
  title_ar: String
  category: ID
  featured_img: ID
  mobile_number: Long
  place: String
  city: ENUM_CENTERS_CITY
  homescreen: Boolean
  offers: [ID]
  partner: ID
  favourites: [ID]
  created_by: ID
  updated_by: ID
}

input editFavouriteInput {
  user: ID
  status: Boolean
  membership_plan: ID
  center: ID
  favourites: String
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editGiftAvailedInput {
  user: ID
  membership_plan: ID
  gift_id: ID
  name_en: String
  name_ar: String
  desc_en: String
  desc_ar: String
  featured_img: ID
  status: Boolean
  created_by: ID
  updated_by: ID
}

input editGiftInput {
  name_en: String
  name_ar: String
  featured_img: ID
  expiry: DateTime
  quantity: Int
  gift_type: ID
  membership_plans: [ID]
  desc_en: String
  desc_ar: String
  status: Boolean
  is_assured: Boolean
  created_by: ID
  updated_by: ID
}

input editGiftTypeInput {
  name_en: String
  name_ar: String
  created_by: ID
  updated_by: ID
}

input editMembershipBenefitInput {
  text_en: String
  text_ar: String
  created_by: ID
  updated_by: ID
}

input editMembershipCardInfoInput {
  text_en: String
  text_ar: String
  created_by: ID
  updated_by: ID
}

input editMembershipInput {
  user: ID
  serial: String
  expiry: DateTime
  membership_transactions: [ID]
  qrcode_url: String
  package: Int
  limit: Long
  center_check_ins: [ID]
  is_gift_generated: Boolean
  gift_generated_date: DateTime
  created_by: ID
  updated_by: ID
}

input editMembershipPlanInput {
  name_en: String
  desc_en: String
  price: Float
  expiry: DateTime
  limit: Int
  status: Boolean
  name_ar: String
  desc_ar: String
  featured_img: ID
  created_by: ID
  updated_by: ID
}

input editMembershipTransactionInput {
  membership_id: Int
  serial: String
  type: String
  amount: Int
  expiry: DateTime
  created_by: ID
  updated_by: ID
}

input editNotificationInput {
  title_en: String
  title_ar: String
  desc_en: String
  desc_ar: String
  created_by: ID
  updated_by: ID
}

input editOfferInput {
  title_en: String
  title_ar: String
  discount: Int
  desc_en: String
  desc_ar: String
  country: ENUM_OFFERS_COUNTRY
  city: ENUM_OFFERS_CITY
  expiry: DateTime
  mobile_number: Long
  latitude: Float
  longitude: Float
  status: Boolean
  actual_price: Int
  discounted_price: Int
  place: String
  featured_img: ID
  center: ID
  center_check_ins: [ID]
  created_by: ID
  updated_by: ID
}

input editPartnerInput {
  username: String
  email: String
  password: String
  mobile_number: Long
  center: ID
  created_by: ID
  updated_by: ID
}

input editPrivacyPolicyInput {
  privacy_en: String
  privacy_ar: String
  created_by: ID
  updated_by: ID
}

input editProductInput {
  title_en: String
  title_ar: String
  worth_of: Float
  desc_en: String
  desc_ar: String
  featured_imgs: [ID]
  status: Boolean
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editSpecialistHelpInput {
  title_en: String
  title_ar: String
  featured_img: ID
  created_by: ID
  updated_by: ID
}

input editSpecialistInput {
  name_en: String
  name_ar: String
  desc_en: String
  desc_ar: String
  mobile_number: Long
  category: ID
  center: ID
  featured_img: ID
  specialization_en: String
  specialization_ar: String
  created_by: ID
  updated_by: ID
}

input editTermsAndConditionInput {
  terms_en: String
  terms_ar: String
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  language: String
  notification_token: String
  mobile_number: Long
  favourites: String
  dob: Date
  birthday: DateTime
  platform: String
  app_version: String
  center_check_ins: [ID]
  favourite: [ID]
  created_by: ID
  updated_by: ID
}

input editVoucherAvailedInput {
  voucher_id: ID
  user_id: ID
  featured_img: ID
  membership_plan: ID
  buy_title_en: String
  buy_title_ar: String
  win_title_en: String
  win_title_ar: String
  desc_an: String
  desc_ar: String
  product_ids: [ID]
  gift_ids: [ID]
  is_won: Boolean
  created_by: ID
  updated_by: ID
}

input editVoucherInput {
  buy_title_en: String
  buy_title_ar: String
  win_title_en: String
  win_title_ar: String
  desc_en: String
  desc_ar: String
  featured_img: ID
  product_id: [ID]
  assured_gift_id: [ID]
  cost: Float
  status: Boolean
  minimum_subscription_limit: Int
  users_subscribed: Long
  expiry: DateTime
  membership_plans: [ID]
  created_by: ID
  updated_by: ID
}

input editVoucherRuleInput {
  text_en: String
  text_ar: String
  created_by: ID
  updated_by: ID
}

enum ENUM_CENTERS_CITY {
  Abu_Dhabi
  Ajman
  Dubai
  Fujairah
  Ras_Al_Khaimah
  Sharjah
  Umm_Al_Quwain
}

enum ENUM_OFFERS_CITY {
  Abu_Dhabi
  Ajman
  Dubai
  Fujairah
  Ras_Al_Khaimah
  Sharjah
  Umm_Al_Quwain
}

enum ENUM_OFFERS_COUNTRY {
  United_Arab_Emirates
}

input FavouriteInput {
  user: ID
  status: Boolean
  membership_plan: ID
  center: ID
  favourites: String
  created_by: ID
  updated_by: ID
}

type Favourites {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  user: UsersPermissionsUser
  status: Boolean
  membership_plan: MembershipPlans
  center: Centers
  favourites: String
  created_by: AdminUser
  updated_by: AdminUser
}

type FavouritesAggregator {
  count: Int
  totalCount: Int
}

type FavouritesConnection {
  values: [Favourites]
  groupBy: FavouritesGroupBy
  aggregate: FavouritesAggregator
}

type FavouritesConnectionCenter {
  key: ID
  connection: FavouritesConnection
}

type FavouritesConnectionCreated_at {
  key: DateTime
  connection: FavouritesConnection
}

type FavouritesConnectionCreated_by {
  key: ID
  connection: FavouritesConnection
}

type FavouritesConnectionFavourites {
  key: String
  connection: FavouritesConnection
}

type FavouritesConnectionId {
  key: ID
  connection: FavouritesConnection
}

type FavouritesConnectionMembership_plan {
  key: ID
  connection: FavouritesConnection
}

type FavouritesConnectionStatus {
  key: Boolean
  connection: FavouritesConnection
}

type FavouritesConnectionUpdated_at {
  key: DateTime
  connection: FavouritesConnection
}

type FavouritesConnectionUpdated_by {
  key: ID
  connection: FavouritesConnection
}

type FavouritesConnectionUser {
  key: ID
  connection: FavouritesConnection
}

type FavouritesGroupBy {
  id: [FavouritesConnectionId]
  created_at: [FavouritesConnectionCreated_at]
  updated_at: [FavouritesConnectionUpdated_at]
  user: [FavouritesConnectionUser]
  status: [FavouritesConnectionStatus]
  membership_plan: [FavouritesConnectionMembership_plan]
  center: [FavouritesConnectionCenter]
  favourites: [FavouritesConnectionFavourites]
  created_by: [FavouritesConnectionCreated_by]
  updated_by: [FavouritesConnectionUpdated_by]
}

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

type GetMembershipInfo {
  offer: [Offers]
  membership: Membership
}

type GiftAvailed {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  user: UsersPermissionsUser
  membership_plan: MembershipPlans
  gift_id: Gifts
  name_en: String
  name_ar: String
  desc_en: String
  desc_ar: String
  featured_img: UploadFile
  status: Boolean
  created_by: AdminUser
  updated_by: AdminUser
}

type GiftAvailedAggregator {
  count: Int
  totalCount: Int
}

type GiftAvailedConnection {
  values: [GiftAvailed]
  groupBy: GiftAvailedGroupBy
  aggregate: GiftAvailedAggregator
}

type GiftAvailedConnectionCreated_at {
  key: DateTime
  connection: GiftAvailedConnection
}

type GiftAvailedConnectionCreated_by {
  key: ID
  connection: GiftAvailedConnection
}

type GiftAvailedConnectionDesc_ar {
  key: String
  connection: GiftAvailedConnection
}

type GiftAvailedConnectionDesc_en {
  key: String
  connection: GiftAvailedConnection
}

type GiftAvailedConnectionFeatured_img {
  key: ID
  connection: GiftAvailedConnection
}

type GiftAvailedConnectionGift_id {
  key: ID
  connection: GiftAvailedConnection
}

type GiftAvailedConnectionId {
  key: ID
  connection: GiftAvailedConnection
}

type GiftAvailedConnectionMembership_plan {
  key: ID
  connection: GiftAvailedConnection
}

type GiftAvailedConnectionName_ar {
  key: String
  connection: GiftAvailedConnection
}

type GiftAvailedConnectionName_en {
  key: String
  connection: GiftAvailedConnection
}

type GiftAvailedConnectionStatus {
  key: Boolean
  connection: GiftAvailedConnection
}

type GiftAvailedConnectionUpdated_at {
  key: DateTime
  connection: GiftAvailedConnection
}

type GiftAvailedConnectionUpdated_by {
  key: ID
  connection: GiftAvailedConnection
}

type GiftAvailedConnectionUser {
  key: ID
  connection: GiftAvailedConnection
}

type GiftAvailedGroupBy {
  id: [GiftAvailedConnectionId]
  created_at: [GiftAvailedConnectionCreated_at]
  updated_at: [GiftAvailedConnectionUpdated_at]
  user: [GiftAvailedConnectionUser]
  membership_plan: [GiftAvailedConnectionMembership_plan]
  gift_id: [GiftAvailedConnectionGift_id]
  name_en: [GiftAvailedConnectionName_en]
  name_ar: [GiftAvailedConnectionName_ar]
  desc_en: [GiftAvailedConnectionDesc_en]
  desc_ar: [GiftAvailedConnectionDesc_ar]
  featured_img: [GiftAvailedConnectionFeatured_img]
  status: [GiftAvailedConnectionStatus]
  created_by: [GiftAvailedConnectionCreated_by]
  updated_by: [GiftAvailedConnectionUpdated_by]
}

input GiftAvailedInput {
  user: ID
  membership_plan: ID
  gift_id: ID
  name_en: String
  name_ar: String
  desc_en: String
  desc_ar: String
  featured_img: ID
  status: Boolean
  created_by: ID
  updated_by: ID
}

input GiftInput {
  name_en: String
  name_ar: String
  featured_img: ID
  expiry: DateTime
  quantity: Int
  gift_type: ID
  membership_plans: [ID]
  desc_en: String
  desc_ar: String
  status: Boolean
  is_assured: Boolean
  created_by: ID
  updated_by: ID
}

type Gifts {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name_en: String
  name_ar: String
  featured_img: UploadFile
  expiry: DateTime
  quantity: Int
  gift_type: GiftType
  desc_en: String
  desc_ar: String
  status: Boolean
  is_assured: Boolean
  created_by: AdminUser
  updated_by: AdminUser
  membership_plans(sort: String, limit: Int, start: Int, where: JSON): [MembershipPlans]
}

type GiftsAggregator {
  count: Int
  totalCount: Int
  sum: GiftsAggregatorSum
  avg: GiftsAggregatorAvg
  min: GiftsAggregatorMin
  max: GiftsAggregatorMax
}

type GiftsAggregatorAvg {
  quantity: Float
}

type GiftsAggregatorMax {
  quantity: Float
}

type GiftsAggregatorMin {
  quantity: Float
}

type GiftsAggregatorSum {
  quantity: Float
}

type GiftsConnection {
  values: [Gifts]
  groupBy: GiftsGroupBy
  aggregate: GiftsAggregator
}

type GiftsConnectionCreated_at {
  key: DateTime
  connection: GiftsConnection
}

type GiftsConnectionCreated_by {
  key: ID
  connection: GiftsConnection
}

type GiftsConnectionDesc_ar {
  key: String
  connection: GiftsConnection
}

type GiftsConnectionDesc_en {
  key: String
  connection: GiftsConnection
}

type GiftsConnectionExpiry {
  key: DateTime
  connection: GiftsConnection
}

type GiftsConnectionFeatured_img {
  key: ID
  connection: GiftsConnection
}

type GiftsConnectionGift_type {
  key: ID
  connection: GiftsConnection
}

type GiftsConnectionId {
  key: ID
  connection: GiftsConnection
}

type GiftsConnectionIs_assured {
  key: Boolean
  connection: GiftsConnection
}

type GiftsConnectionName_ar {
  key: String
  connection: GiftsConnection
}

type GiftsConnectionName_en {
  key: String
  connection: GiftsConnection
}

type GiftsConnectionQuantity {
  key: Int
  connection: GiftsConnection
}

type GiftsConnectionStatus {
  key: Boolean
  connection: GiftsConnection
}

type GiftsConnectionUpdated_at {
  key: DateTime
  connection: GiftsConnection
}

type GiftsConnectionUpdated_by {
  key: ID
  connection: GiftsConnection
}

type GiftsGroupBy {
  id: [GiftsConnectionId]
  created_at: [GiftsConnectionCreated_at]
  updated_at: [GiftsConnectionUpdated_at]
  name_en: [GiftsConnectionName_en]
  name_ar: [GiftsConnectionName_ar]
  featured_img: [GiftsConnectionFeatured_img]
  expiry: [GiftsConnectionExpiry]
  quantity: [GiftsConnectionQuantity]
  gift_type: [GiftsConnectionGift_type]
  desc_en: [GiftsConnectionDesc_en]
  desc_ar: [GiftsConnectionDesc_ar]
  status: [GiftsConnectionStatus]
  is_assured: [GiftsConnectionIs_assured]
  created_by: [GiftsConnectionCreated_by]
  updated_by: [GiftsConnectionUpdated_by]
}

type GiftsPayLoad {
  disabled: Boolean
  won: Boolean!
  gift: Gifts
}

type GiftType {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name_en: String
  name_ar: String
  created_by: AdminUser
  updated_by: AdminUser
}

type GiftTypeAggregator {
  count: Int
  totalCount: Int
}

type GiftTypeConnection {
  values: [GiftType]
  groupBy: GiftTypeGroupBy
  aggregate: GiftTypeAggregator
}

type GiftTypeConnectionCreated_at {
  key: DateTime
  connection: GiftTypeConnection
}

type GiftTypeConnectionCreated_by {
  key: ID
  connection: GiftTypeConnection
}

type GiftTypeConnectionId {
  key: ID
  connection: GiftTypeConnection
}

type GiftTypeConnectionName_ar {
  key: String
  connection: GiftTypeConnection
}

type GiftTypeConnectionName_en {
  key: String
  connection: GiftTypeConnection
}

type GiftTypeConnectionUpdated_at {
  key: DateTime
  connection: GiftTypeConnection
}

type GiftTypeConnectionUpdated_by {
  key: ID
  connection: GiftTypeConnection
}

type GiftTypeGroupBy {
  id: [GiftTypeConnectionId]
  created_at: [GiftTypeConnectionCreated_at]
  updated_at: [GiftTypeConnectionUpdated_at]
  name_en: [GiftTypeConnectionName_en]
  name_ar: [GiftTypeConnectionName_ar]
  created_by: [GiftTypeConnectionCreated_by]
  updated_by: [GiftTypeConnectionUpdated_by]
}

input GiftTypeInput {
  name_en: String
  name_ar: String
  created_by: ID
  updated_by: ID
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

type Membership {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  user: UsersPermissionsUser
  serial: String
  expiry: DateTime
  qrcode_url: String
  package: Int
  limit: Long
  is_gift_generated: Boolean
  gift_generated_date: DateTime
  created_by: AdminUser
  updated_by: AdminUser
  membership_transactions(sort: String, limit: Int, start: Int, where: JSON): [MembershipTransactions]
  center_check_ins(sort: String, limit: Int, start: Int, where: JSON): [CenterCheckIn]
}

type MembershipAggregator {
  count: Int
  totalCount: Int
  sum: MembershipAggregatorSum
  avg: MembershipAggregatorAvg
  min: MembershipAggregatorMin
  max: MembershipAggregatorMax
}

type MembershipAggregatorAvg {
  package: Float
}

type MembershipAggregatorMax {
  package: Float
}

type MembershipAggregatorMin {
  package: Float
}

type MembershipAggregatorSum {
  package: Float
}

input MembershipBenefitInput {
  text_en: String
  text_ar: String
  created_by: ID
  updated_by: ID
}

type MembershipBenefits {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  text_en: String
  text_ar: String
  created_by: AdminUser
  updated_by: AdminUser
}

type MembershipCardInfo {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  text_en: String
  text_ar: String
  created_by: AdminUser
  updated_by: AdminUser
}

input MembershipCardInfoInput {
  text_en: String
  text_ar: String
  created_by: ID
  updated_by: ID
}

type MembershipConnection {
  values: [Membership]
  groupBy: MembershipGroupBy
  aggregate: MembershipAggregator
}

type MembershipConnectionCreated_at {
  key: DateTime
  connection: MembershipConnection
}

type MembershipConnectionCreated_by {
  key: ID
  connection: MembershipConnection
}

type MembershipConnectionExpiry {
  key: DateTime
  connection: MembershipConnection
}

type MembershipConnectionGift_generated_date {
  key: DateTime
  connection: MembershipConnection
}

type MembershipConnectionId {
  key: ID
  connection: MembershipConnection
}

type MembershipConnectionIs_gift_generated {
  key: Boolean
  connection: MembershipConnection
}

type MembershipConnectionLimit {
  key: ID
  connection: MembershipConnection
}

type MembershipConnectionPackage {
  key: Int
  connection: MembershipConnection
}

type MembershipConnectionQrcode_url {
  key: String
  connection: MembershipConnection
}

type MembershipConnectionSerial {
  key: String
  connection: MembershipConnection
}

type MembershipConnectionUpdated_at {
  key: DateTime
  connection: MembershipConnection
}

type MembershipConnectionUpdated_by {
  key: ID
  connection: MembershipConnection
}

type MembershipConnectionUser {
  key: ID
  connection: MembershipConnection
}

type MembershipGroupBy {
  id: [MembershipConnectionId]
  created_at: [MembershipConnectionCreated_at]
  updated_at: [MembershipConnectionUpdated_at]
  user: [MembershipConnectionUser]
  serial: [MembershipConnectionSerial]
  expiry: [MembershipConnectionExpiry]
  qrcode_url: [MembershipConnectionQrcode_url]
  package: [MembershipConnectionPackage]
  limit: [MembershipConnectionLimit]
  is_gift_generated: [MembershipConnectionIs_gift_generated]
  gift_generated_date: [MembershipConnectionGift_generated_date]
  created_by: [MembershipConnectionCreated_by]
  updated_by: [MembershipConnectionUpdated_by]
}

input MembershipInput {
  user: ID
  serial: String
  expiry: DateTime
  membership_transactions: [ID]
  qrcode_url: String
  package: Int
  limit: Long
  center_check_ins: [ID]
  is_gift_generated: Boolean
  gift_generated_date: DateTime
  created_by: ID
  updated_by: ID
}

input MembershipPlanInput {
  name_en: String
  desc_en: String
  price: Float
  expiry: DateTime
  limit: Int
  status: Boolean
  name_ar: String
  desc_ar: String
  featured_img: ID
  created_by: ID
  updated_by: ID
}

type MembershipPlans {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name_en: String
  desc_en: String
  price: Float
  expiry: DateTime
  limit: Int
  status: Boolean
  name_ar: String
  desc_ar: String
  featured_img: UploadFile
  created_by: AdminUser
  updated_by: AdminUser
}

type MembershipPlansAggregator {
  count: Int
  totalCount: Int
  sum: MembershipPlansAggregatorSum
  avg: MembershipPlansAggregatorAvg
  min: MembershipPlansAggregatorMin
  max: MembershipPlansAggregatorMax
}

type MembershipPlansAggregatorAvg {
  price: Float
  limit: Float
}

type MembershipPlansAggregatorMax {
  price: Float
  limit: Float
}

type MembershipPlansAggregatorMin {
  price: Float
  limit: Float
}

type MembershipPlansAggregatorSum {
  price: Float
  limit: Float
}

type MembershipPlansConnection {
  values: [MembershipPlans]
  groupBy: MembershipPlansGroupBy
  aggregate: MembershipPlansAggregator
}

type MembershipPlansConnectionCreated_at {
  key: DateTime
  connection: MembershipPlansConnection
}

type MembershipPlansConnectionCreated_by {
  key: ID
  connection: MembershipPlansConnection
}

type MembershipPlansConnectionDesc_ar {
  key: String
  connection: MembershipPlansConnection
}

type MembershipPlansConnectionDesc_en {
  key: String
  connection: MembershipPlansConnection
}

type MembershipPlansConnectionExpiry {
  key: DateTime
  connection: MembershipPlansConnection
}

type MembershipPlansConnectionFeatured_img {
  key: ID
  connection: MembershipPlansConnection
}

type MembershipPlansConnectionId {
  key: ID
  connection: MembershipPlansConnection
}

type MembershipPlansConnectionLimit {
  key: Int
  connection: MembershipPlansConnection
}

type MembershipPlansConnectionName_ar {
  key: String
  connection: MembershipPlansConnection
}

type MembershipPlansConnectionName_en {
  key: String
  connection: MembershipPlansConnection
}

type MembershipPlansConnectionPrice {
  key: Float
  connection: MembershipPlansConnection
}

type MembershipPlansConnectionStatus {
  key: Boolean
  connection: MembershipPlansConnection
}

type MembershipPlansConnectionUpdated_at {
  key: DateTime
  connection: MembershipPlansConnection
}

type MembershipPlansConnectionUpdated_by {
  key: ID
  connection: MembershipPlansConnection
}

type MembershipPlansGroupBy {
  id: [MembershipPlansConnectionId]
  created_at: [MembershipPlansConnectionCreated_at]
  updated_at: [MembershipPlansConnectionUpdated_at]
  name_en: [MembershipPlansConnectionName_en]
  desc_en: [MembershipPlansConnectionDesc_en]
  price: [MembershipPlansConnectionPrice]
  expiry: [MembershipPlansConnectionExpiry]
  limit: [MembershipPlansConnectionLimit]
  status: [MembershipPlansConnectionStatus]
  name_ar: [MembershipPlansConnectionName_ar]
  desc_ar: [MembershipPlansConnectionDesc_ar]
  featured_img: [MembershipPlansConnectionFeatured_img]
  created_by: [MembershipPlansConnectionCreated_by]
  updated_by: [MembershipPlansConnectionUpdated_by]
}

input MembershipTransactionInput {
  membership_id: Int
  serial: String
  type: String
  amount: Int
  expiry: DateTime
  created_by: ID
  updated_by: ID
}

type MembershipTransactions {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  membership_id: Int
  serial: String
  type: String
  amount: Int
  expiry: DateTime
  created_by: AdminUser
  updated_by: AdminUser
}

type MembershipTransactionsAggregator {
  count: Int
  totalCount: Int
  sum: MembershipTransactionsAggregatorSum
  avg: MembershipTransactionsAggregatorAvg
  min: MembershipTransactionsAggregatorMin
  max: MembershipTransactionsAggregatorMax
}

type MembershipTransactionsAggregatorAvg {
  membership_id: Float
  amount: Float
}

type MembershipTransactionsAggregatorMax {
  membership_id: Float
  amount: Float
}

type MembershipTransactionsAggregatorMin {
  membership_id: Float
  amount: Float
}

type MembershipTransactionsAggregatorSum {
  membership_id: Float
  amount: Float
}

type MembershipTransactionsConnection {
  values: [MembershipTransactions]
  groupBy: MembershipTransactionsGroupBy
  aggregate: MembershipTransactionsAggregator
}

type MembershipTransactionsConnectionAmount {
  key: Int
  connection: MembershipTransactionsConnection
}

type MembershipTransactionsConnectionCreated_at {
  key: DateTime
  connection: MembershipTransactionsConnection
}

type MembershipTransactionsConnectionCreated_by {
  key: ID
  connection: MembershipTransactionsConnection
}

type MembershipTransactionsConnectionExpiry {
  key: DateTime
  connection: MembershipTransactionsConnection
}

type MembershipTransactionsConnectionId {
  key: ID
  connection: MembershipTransactionsConnection
}

type MembershipTransactionsConnectionMembership_id {
  key: Int
  connection: MembershipTransactionsConnection
}

type MembershipTransactionsConnectionSerial {
  key: String
  connection: MembershipTransactionsConnection
}

type MembershipTransactionsConnectionType {
  key: String
  connection: MembershipTransactionsConnection
}

type MembershipTransactionsConnectionUpdated_at {
  key: DateTime
  connection: MembershipTransactionsConnection
}

type MembershipTransactionsConnectionUpdated_by {
  key: ID
  connection: MembershipTransactionsConnection
}

type MembershipTransactionsGroupBy {
  id: [MembershipTransactionsConnectionId]
  created_at: [MembershipTransactionsConnectionCreated_at]
  updated_at: [MembershipTransactionsConnectionUpdated_at]
  membership_id: [MembershipTransactionsConnectionMembership_id]
  serial: [MembershipTransactionsConnectionSerial]
  type: [MembershipTransactionsConnectionType]
  amount: [MembershipTransactionsConnectionAmount]
  expiry: [MembershipTransactionsConnectionExpiry]
  created_by: [MembershipTransactionsConnectionCreated_by]
  updated_by: [MembershipTransactionsConnectionUpdated_by]
}

union Morph = GetMembershipInfo | OfferandUserInfo | UserInfo | OffersInfo | UserandCenterCheckin | UserPayload | CenterProfile | UserGifts | GiftsPayLoad | PartnerLoginPaylod | UserVoucher | AvailableVouchers | VouchersPayLoad | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | CreateUserPayload | AppBasicInformation | updateAppBasicInformationPayload | deleteAppBasicInformationPayload | Banners | BannersConnection | BannersAggregator | BannersGroupBy | BannersConnectionId | BannersConnectionCreated_at | BannersConnectionUpdated_at | BannersConnectionBanner_img | BannersConnectionCreated_by | BannersConnectionUpdated_by | createBannerPayload | updateBannerPayload | deleteBannerPayload | BasicMembershipAmount | updateBasicMembershipAmountPayload | deleteBasicMembershipAmountPayload | Categories | CategoriesConnection | CategoriesAggregator | CategoriesGroupBy | CategoriesConnectionId | CategoriesConnectionCreated_at | CategoriesConnectionUpdated_at | CategoriesConnectionTitle_en | CategoriesConnectionFeatured_img | CategoriesConnectionTitle_ar | CategoriesConnectionEnabled | CategoriesConnectionCreated_by | CategoriesConnectionUpdated_by | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | CenterCheckIn | CenterCheckInConnection | CenterCheckInAggregator | CenterCheckInAggregatorSum | CenterCheckInAggregatorAvg | CenterCheckInAggregatorMin | CenterCheckInAggregatorMax | CenterCheckInGroupBy | CenterCheckInConnectionId | CenterCheckInConnectionCreated_at | CenterCheckInConnectionUpdated_at | CenterCheckInConnectionUser_id | CenterCheckInConnectionCenter | CenterCheckInConnectionMembership | CenterCheckInConnectionTransaction_id | CenterCheckInConnectionDiscounted_price | CenterCheckInConnectionOriginal_price | CenterCheckInConnectionDiscount | CenterCheckInConnectionOffer_id | CenterCheckInConnectionCreated_by | CenterCheckInConnectionUpdated_by | createCenterCheckInPayload | updateCenterCheckInPayload | deleteCenterCheckInPayload | Centers | CentersConnection | CentersAggregator | CentersGroupBy | CentersConnectionId | CentersConnectionCreated_at | CentersConnectionUpdated_at | CentersConnectionTitle_en | CentersConnectionTitle_ar | CentersConnectionCategory | CentersConnectionFeatured_img | CentersConnectionMobile_number | CentersConnectionPlace | CentersConnectionCity | CentersConnectionHomescreen | CentersConnectionPartner | CentersConnectionCreated_by | CentersConnectionUpdated_by | createCenterPayload | updateCenterPayload | deleteCenterPayload | Favourites | FavouritesConnection | FavouritesAggregator | FavouritesGroupBy | FavouritesConnectionId | FavouritesConnectionCreated_at | FavouritesConnectionUpdated_at | FavouritesConnectionUser | FavouritesConnectionStatus | FavouritesConnectionMembership_plan | FavouritesConnectionCenter | FavouritesConnectionFavourites | FavouritesConnectionCreated_by | FavouritesConnectionUpdated_by | createFavouritePayload | updateFavouritePayload | deleteFavouritePayload | GiftAvailed | GiftAvailedConnection | GiftAvailedAggregator | GiftAvailedGroupBy | GiftAvailedConnectionId | GiftAvailedConnectionCreated_at | GiftAvailedConnectionUpdated_at | GiftAvailedConnectionUser | GiftAvailedConnectionMembership_plan | GiftAvailedConnectionGift_id | GiftAvailedConnectionName_en | GiftAvailedConnectionName_ar | GiftAvailedConnectionDesc_en | GiftAvailedConnectionDesc_ar | GiftAvailedConnectionFeatured_img | GiftAvailedConnectionStatus | GiftAvailedConnectionCreated_by | GiftAvailedConnectionUpdated_by | createGiftAvailedPayload | updateGiftAvailedPayload | deleteGiftAvailedPayload | GiftType | GiftTypeConnection | GiftTypeAggregator | GiftTypeGroupBy | GiftTypeConnectionId | GiftTypeConnectionCreated_at | GiftTypeConnectionUpdated_at | GiftTypeConnectionName_en | GiftTypeConnectionName_ar | GiftTypeConnectionCreated_by | GiftTypeConnectionUpdated_by | createGiftTypePayload | updateGiftTypePayload | deleteGiftTypePayload | Gifts | GiftsConnection | GiftsAggregator | GiftsAggregatorSum | GiftsAggregatorAvg | GiftsAggregatorMin | GiftsAggregatorMax | GiftsGroupBy | GiftsConnectionId | GiftsConnectionCreated_at | GiftsConnectionUpdated_at | GiftsConnectionName_en | GiftsConnectionName_ar | GiftsConnectionFeatured_img | GiftsConnectionExpiry | GiftsConnectionQuantity | GiftsConnectionGift_type | GiftsConnectionDesc_en | GiftsConnectionDesc_ar | GiftsConnectionStatus | GiftsConnectionIs_assured | GiftsConnectionCreated_by | GiftsConnectionUpdated_by | createGiftPayload | updateGiftPayload | deleteGiftPayload | MembershipBenefits | updateMembershipBenefitPayload | deleteMembershipBenefitPayload | MembershipCardInfo | updateMembershipCardInfoPayload | deleteMembershipCardInfoPayload | MembershipPlans | MembershipPlansConnection | MembershipPlansAggregator | MembershipPlansAggregatorSum | MembershipPlansAggregatorAvg | MembershipPlansAggregatorMin | MembershipPlansAggregatorMax | MembershipPlansGroupBy | MembershipPlansConnectionId | MembershipPlansConnectionCreated_at | MembershipPlansConnectionUpdated_at | MembershipPlansConnectionName_en | MembershipPlansConnectionDesc_en | MembershipPlansConnectionPrice | MembershipPlansConnectionExpiry | MembershipPlansConnectionLimit | MembershipPlansConnectionStatus | MembershipPlansConnectionName_ar | MembershipPlansConnectionDesc_ar | MembershipPlansConnectionFeatured_img | MembershipPlansConnectionCreated_by | MembershipPlansConnectionUpdated_by | createMembershipPlanPayload | updateMembershipPlanPayload | deleteMembershipPlanPayload | MembershipTransactions | MembershipTransactionsConnection | MembershipTransactionsAggregator | MembershipTransactionsAggregatorSum | MembershipTransactionsAggregatorAvg | MembershipTransactionsAggregatorMin | MembershipTransactionsAggregatorMax | MembershipTransactionsGroupBy | MembershipTransactionsConnectionId | MembershipTransactionsConnectionCreated_at | MembershipTransactionsConnectionUpdated_at | MembershipTransactionsConnectionMembership_id | MembershipTransactionsConnectionSerial | MembershipTransactionsConnectionType | MembershipTransactionsConnectionAmount | MembershipTransactionsConnectionExpiry | MembershipTransactionsConnectionCreated_by | MembershipTransactionsConnectionUpdated_by | createMembershipTransactionPayload | updateMembershipTransactionPayload | deleteMembershipTransactionPayload | Membership | MembershipConnection | MembershipAggregator | MembershipAggregatorSum | MembershipAggregatorAvg | MembershipAggregatorMin | MembershipAggregatorMax | MembershipGroupBy | MembershipConnectionId | MembershipConnectionCreated_at | MembershipConnectionUpdated_at | MembershipConnectionUser | MembershipConnectionSerial | MembershipConnectionExpiry | MembershipConnectionQrcode_url | MembershipConnectionPackage | MembershipConnectionLimit | MembershipConnectionIs_gift_generated | MembershipConnectionGift_generated_date | MembershipConnectionCreated_by | MembershipConnectionUpdated_by | createMembershipPayload | updateMembershipPayload | deleteMembershipPayload | Notifications | NotificationsConnection | NotificationsAggregator | NotificationsGroupBy | NotificationsConnectionId | NotificationsConnectionCreated_at | NotificationsConnectionUpdated_at | NotificationsConnectionTitle_en | NotificationsConnectionTitle_ar | NotificationsConnectionDesc_en | NotificationsConnectionDesc_ar | NotificationsConnectionCreated_by | NotificationsConnectionUpdated_by | createNotificationPayload | updateNotificationPayload | deleteNotificationPayload | Offers | OffersConnection | OffersAggregator | OffersAggregatorSum | OffersAggregatorAvg | OffersAggregatorMin | OffersAggregatorMax | OffersGroupBy | OffersConnectionId | OffersConnectionCreated_at | OffersConnectionUpdated_at | OffersConnectionTitle_en | OffersConnectionTitle_ar | OffersConnectionDiscount | OffersConnectionDesc_en | OffersConnectionDesc_ar | OffersConnectionCountry | OffersConnectionCity | OffersConnectionExpiry | OffersConnectionMobile_number | OffersConnectionLatitude | OffersConnectionLongitude | OffersConnectionStatus | OffersConnectionActual_price | OffersConnectionDiscounted_price | OffersConnectionPlace | OffersConnectionFeatured_img | OffersConnectionCenter | OffersConnectionCreated_by | OffersConnectionUpdated_by | createOfferPayload | updateOfferPayload | deleteOfferPayload | Partner | PartnerConnection | PartnerAggregator | PartnerGroupBy | PartnerConnectionId | PartnerConnectionCreated_at | PartnerConnectionUpdated_at | PartnerConnectionUsername | PartnerConnectionEmail | PartnerConnectionPassword | PartnerConnectionMobile_number | PartnerConnectionCenter | PartnerConnectionCreated_by | PartnerConnectionUpdated_by | createPartnerPayload | updatePartnerPayload | deletePartnerPayload | PrivacyPolicy | updatePrivacyPolicyPayload | deletePrivacyPolicyPayload | Products | ProductsConnection | ProductsAggregator | ProductsAggregatorSum | ProductsAggregatorAvg | ProductsAggregatorMin | ProductsAggregatorMax | ProductsGroupBy | ProductsConnectionId | ProductsConnectionCreated_at | ProductsConnectionUpdated_at | ProductsConnectionTitle_en | ProductsConnectionTitle_ar | ProductsConnectionWorth_of | ProductsConnectionDesc_en | ProductsConnectionDesc_ar | ProductsConnectionStatus | ProductsConnectionCreated_by | ProductsConnectionUpdated_by | createProductPayload | updateProductPayload | deleteProductPayload | SpecialistHelp | updateSpecialistHelpPayload | deleteSpecialistHelpPayload | Specialist | SpecialistConnection | SpecialistAggregator | SpecialistGroupBy | SpecialistConnectionId | SpecialistConnectionCreated_at | SpecialistConnectionUpdated_at | SpecialistConnectionName_en | SpecialistConnectionName_ar | SpecialistConnectionDesc_en | SpecialistConnectionDesc_ar | SpecialistConnectionMobile_number | SpecialistConnectionCategory | SpecialistConnectionCenter | SpecialistConnectionFeatured_img | SpecialistConnectionSpecialization_en | SpecialistConnectionSpecialization_ar | SpecialistConnectionCreated_by | SpecialistConnectionUpdated_by | createSpecialistPayload | updateSpecialistPayload | deleteSpecialistPayload | TermsAndConditions | updateTermsAndConditionPayload | deleteTermsAndConditionPayload | VoucherAvailed | VoucherAvailedConnection | VoucherAvailedAggregator | VoucherAvailedGroupBy | VoucherAvailedConnectionId | VoucherAvailedConnectionCreated_at | VoucherAvailedConnectionUpdated_at | VoucherAvailedConnectionVoucher_id | VoucherAvailedConnectionUser_id | VoucherAvailedConnectionFeatured_img | VoucherAvailedConnectionMembership_plan | VoucherAvailedConnectionBuy_title_en | VoucherAvailedConnectionBuy_title_ar | VoucherAvailedConnectionWin_title_en | VoucherAvailedConnectionWin_title_ar | VoucherAvailedConnectionDesc_an | VoucherAvailedConnectionDesc_ar | VoucherAvailedConnectionIs_won | VoucherAvailedConnectionCreated_by | VoucherAvailedConnectionUpdated_by | createVoucherAvailedPayload | updateVoucherAvailedPayload | deleteVoucherAvailedPayload | VoucherRules | updateVoucherRulePayload | deleteVoucherRulePayload | Vouchers | VouchersConnection | VouchersAggregator | VouchersAggregatorSum | VouchersAggregatorAvg | VouchersAggregatorMin | VouchersAggregatorMax | VouchersGroupBy | VouchersConnectionId | VouchersConnectionCreated_at | VouchersConnectionUpdated_at | VouchersConnectionBuy_title_en | VouchersConnectionBuy_title_ar | VouchersConnectionWin_title_en | VouchersConnectionWin_title_ar | VouchersConnectionDesc_en | VouchersConnectionDesc_ar | VouchersConnectionFeatured_img | VouchersConnectionCost | VouchersConnectionStatus | VouchersConnectionMinimum_subscription_limit | VouchersConnectionUsers_subscribed | VouchersConnectionExpiry | VouchersConnectionCreated_by | VouchersConnectionUpdated_by | createVoucherPayload | updateVoucherPayload | deleteVoucherPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionCreated_by | UploadFileConnectionUpdated_by | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnectionCreated_by | UsersPermissionsRoleConnectionUpdated_by | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionLanguage | UsersPermissionsUserConnectionNotification_token | UsersPermissionsUserConnectionMobile_number | UsersPermissionsUserConnectionFavourites | UsersPermissionsUserConnectionDob | UsersPermissionsUserConnectionBirthday | UsersPermissionsUserConnectionPlatform | UsersPermissionsUserConnectionApp_version | UsersPermissionsUserConnectionCreated_by | UsersPermissionsUserConnectionUpdated_by | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  updateAppBasicInformation(input: updateAppBasicInformationInput): updateAppBasicInformationPayload
  deleteAppBasicInformation: deleteAppBasicInformationPayload
  createBanner(input: createBannerInput): createBannerPayload
  updateBanner(input: updateBannerInput): updateBannerPayload
  deleteBanner(input: deleteBannerInput): deleteBannerPayload
  updateBasicMembershipAmount(input: updateBasicMembershipAmountInput): updateBasicMembershipAmountPayload
  deleteBasicMembershipAmount: deleteBasicMembershipAmountPayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createCenterCheckIn(input: createCenterCheckInInput): createCenterCheckInPayload
  updateCenterCheckIn(input: updateCenterCheckInInput): updateCenterCheckInPayload
  deleteCenterCheckIn(input: deleteCenterCheckInInput): deleteCenterCheckInPayload
  createCenter(input: createCenterInput): createCenterPayload
  updateCenter(input: updateCenterInput): updateCenterPayload
  deleteCenter(input: deleteCenterInput): deleteCenterPayload
  createFavourite(input: createFavouriteInput): createFavouritePayload
  updateFavourite(input: updateFavouriteInput): updateFavouritePayload
  deleteFavourite(input: deleteFavouriteInput): deleteFavouritePayload
  createGiftAvailed(input: createGiftAvailedInput): createGiftAvailedPayload
  updateGiftAvailed(input: updateGiftAvailedInput): updateGiftAvailedPayload
  deleteGiftAvailed(input: deleteGiftAvailedInput): deleteGiftAvailedPayload
  createGiftType(input: createGiftTypeInput): createGiftTypePayload
  updateGiftType(input: updateGiftTypeInput): updateGiftTypePayload
  deleteGiftType(input: deleteGiftTypeInput): deleteGiftTypePayload
  createGift(input: createGiftInput): createGiftPayload
  updateGift(input: updateGiftInput): updateGiftPayload
  deleteGift(input: deleteGiftInput): deleteGiftPayload
  updateMembershipBenefit(input: updateMembershipBenefitInput): updateMembershipBenefitPayload
  deleteMembershipBenefit: deleteMembershipBenefitPayload
  updateMembershipCardInfo(input: updateMembershipCardInfoInput): updateMembershipCardInfoPayload
  deleteMembershipCardInfo: deleteMembershipCardInfoPayload
  createMembershipPlan(input: createMembershipPlanInput): createMembershipPlanPayload
  updateMembershipPlan(input: updateMembershipPlanInput): updateMembershipPlanPayload
  deleteMembershipPlan(input: deleteMembershipPlanInput): deleteMembershipPlanPayload
  createMembershipTransaction(input: createMembershipTransactionInput): createMembershipTransactionPayload
  updateMembershipTransaction(input: updateMembershipTransactionInput): updateMembershipTransactionPayload
  deleteMembershipTransaction(input: deleteMembershipTransactionInput): deleteMembershipTransactionPayload
  createMembership(input: createMembershipInput): createMembershipPayload
  updateMembership(input: updateMembershipInput): updateMembershipPayload
  deleteMembership(input: deleteMembershipInput): deleteMembershipPayload
  createNotification(input: createNotificationInput): createNotificationPayload
  updateNotification(input: updateNotificationInput): updateNotificationPayload
  deleteNotification(input: deleteNotificationInput): deleteNotificationPayload
  createOffer(input: createOfferInput): createOfferPayload
  updateOffer(input: updateOfferInput): updateOfferPayload
  deleteOffer(input: deleteOfferInput): deleteOfferPayload
  createPartner(input: createPartnerInput): createPartnerPayload
  updatePartner(input: updatePartnerInput): updatePartnerPayload
  deletePartner(input: deletePartnerInput): deletePartnerPayload
  updatePrivacyPolicy(input: updatePrivacyPolicyInput): updatePrivacyPolicyPayload
  deletePrivacyPolicy: deletePrivacyPolicyPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  updateSpecialistHelp(input: updateSpecialistHelpInput): updateSpecialistHelpPayload
  deleteSpecialistHelp: deleteSpecialistHelpPayload
  createSpecialist(input: createSpecialistInput): createSpecialistPayload
  updateSpecialist(input: updateSpecialistInput): updateSpecialistPayload
  deleteSpecialist(input: deleteSpecialistInput): deleteSpecialistPayload
  updateTermsAndCondition(input: updateTermsAndConditionInput): updateTermsAndConditionPayload
  deleteTermsAndCondition: deleteTermsAndConditionPayload
  createVoucherAvailed(input: createVoucherAvailedInput): createVoucherAvailedPayload
  updateVoucherAvailed(input: updateVoucherAvailedInput): updateVoucherAvailedPayload
  deleteVoucherAvailed(input: deleteVoucherAvailedInput): deleteVoucherAvailedPayload
  updateVoucherRule(input: updateVoucherRuleInput): updateVoucherRulePayload
  deleteVoucherRule: deleteVoucherRulePayload
  createVoucher(input: createVoucherInput): createVoucherPayload
  updateVoucher(input: updateVoucherInput): updateVoucherPayload
  deleteVoucher(input: deleteVoucherInput): deleteVoucherPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  Checkin(user_id: Int!, center_id: Int!, offers: String!): CenterCheckIn
  AddAsFavourite(user: Int!, offer: Int!, center: Int!, plan: Int): JSON!
  GenerateGift(user_id: Int!): GiftsPayLoad!
  generateMembership(user_id: ID!, plan: Int!): Membership!
  addFavourite(user_id: Int!, offer_id: Int!): JSON!
  partnerLogin(input: PartnerLoginInput!): PartnerLoginPaylod!
  GenerateVoucherWinner(user_id: Int!, plan_id: Int!): UserVoucher!
  BuyVouchers(user_id: Int!, voucher_id: Int!): VouchersPayLoad!
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  createNewUser(username: String!, email: String!, password: String!, mobile_number: Long!, notification_token: String!, dob: String, birthday: DateTime): CreateUserPayload!
  userlogin(input: UsersPermissionsLoginInput!): CreateUserPayload!
}

input NotificationInput {
  title_en: String
  title_ar: String
  desc_en: String
  desc_ar: String
  created_by: ID
  updated_by: ID
}

type Notifications {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title_en: String
  title_ar: String
  desc_en: String
  desc_ar: String
  created_by: AdminUser
  updated_by: AdminUser
}

type NotificationsAggregator {
  count: Int
  totalCount: Int
}

type NotificationsConnection {
  values: [Notifications]
  groupBy: NotificationsGroupBy
  aggregate: NotificationsAggregator
}

type NotificationsConnectionCreated_at {
  key: DateTime
  connection: NotificationsConnection
}

type NotificationsConnectionCreated_by {
  key: ID
  connection: NotificationsConnection
}

type NotificationsConnectionDesc_ar {
  key: String
  connection: NotificationsConnection
}

type NotificationsConnectionDesc_en {
  key: String
  connection: NotificationsConnection
}

type NotificationsConnectionId {
  key: ID
  connection: NotificationsConnection
}

type NotificationsConnectionTitle_ar {
  key: String
  connection: NotificationsConnection
}

type NotificationsConnectionTitle_en {
  key: String
  connection: NotificationsConnection
}

type NotificationsConnectionUpdated_at {
  key: DateTime
  connection: NotificationsConnection
}

type NotificationsConnectionUpdated_by {
  key: ID
  connection: NotificationsConnection
}

type NotificationsGroupBy {
  id: [NotificationsConnectionId]
  created_at: [NotificationsConnectionCreated_at]
  updated_at: [NotificationsConnectionUpdated_at]
  title_en: [NotificationsConnectionTitle_en]
  title_ar: [NotificationsConnectionTitle_ar]
  desc_en: [NotificationsConnectionDesc_en]
  desc_ar: [NotificationsConnectionDesc_ar]
  created_by: [NotificationsConnectionCreated_by]
  updated_by: [NotificationsConnectionUpdated_by]
}

type OfferandUserInfo {
  centercheckin: CenterCheckIn
}

input OfferInput {
  title_en: String
  title_ar: String
  discount: Int
  desc_en: String
  desc_ar: String
  country: ENUM_OFFERS_COUNTRY
  city: ENUM_OFFERS_CITY
  expiry: DateTime
  mobile_number: Long
  latitude: Float
  longitude: Float
  status: Boolean
  actual_price: Int
  discounted_price: Int
  place: String
  featured_img: ID
  center: ID
  center_check_ins: [ID]
  created_by: ID
  updated_by: ID
}

type Offers {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title_en: String
  title_ar: String
  discount: Int
  desc_en: String
  desc_ar: String
  country: ENUM_OFFERS_COUNTRY!
  city: ENUM_OFFERS_CITY!
  expiry: DateTime
  mobile_number: Long
  latitude: Float
  longitude: Float
  status: Boolean!
  actual_price: Int
  discounted_price: Int
  place: String
  featured_img: UploadFile
  center: Centers
  created_by: AdminUser
  updated_by: AdminUser
  center_check_ins(sort: String, limit: Int, start: Int, where: JSON): [CenterCheckIn]
}

type OffersAggregator {
  count: Int
  totalCount: Int
  sum: OffersAggregatorSum
  avg: OffersAggregatorAvg
  min: OffersAggregatorMin
  max: OffersAggregatorMax
}

type OffersAggregatorAvg {
  discount: Float
  latitude: Float
  longitude: Float
  actual_price: Float
  discounted_price: Float
}

type OffersAggregatorMax {
  discount: Float
  latitude: Float
  longitude: Float
  actual_price: Float
  discounted_price: Float
}

type OffersAggregatorMin {
  discount: Float
  latitude: Float
  longitude: Float
  actual_price: Float
  discounted_price: Float
}

type OffersAggregatorSum {
  discount: Float
  latitude: Float
  longitude: Float
  actual_price: Float
  discounted_price: Float
}

type OffersConnection {
  values: [Offers]
  groupBy: OffersGroupBy
  aggregate: OffersAggregator
}

type OffersConnectionActual_price {
  key: Int
  connection: OffersConnection
}

type OffersConnectionCenter {
  key: ID
  connection: OffersConnection
}

type OffersConnectionCity {
  key: String
  connection: OffersConnection
}

type OffersConnectionCountry {
  key: String
  connection: OffersConnection
}

type OffersConnectionCreated_at {
  key: DateTime
  connection: OffersConnection
}

type OffersConnectionCreated_by {
  key: ID
  connection: OffersConnection
}

type OffersConnectionDesc_ar {
  key: String
  connection: OffersConnection
}

type OffersConnectionDesc_en {
  key: String
  connection: OffersConnection
}

type OffersConnectionDiscount {
  key: Int
  connection: OffersConnection
}

type OffersConnectionDiscounted_price {
  key: Int
  connection: OffersConnection
}

type OffersConnectionExpiry {
  key: DateTime
  connection: OffersConnection
}

type OffersConnectionFeatured_img {
  key: ID
  connection: OffersConnection
}

type OffersConnectionId {
  key: ID
  connection: OffersConnection
}

type OffersConnectionLatitude {
  key: Float
  connection: OffersConnection
}

type OffersConnectionLongitude {
  key: Float
  connection: OffersConnection
}

type OffersConnectionMobile_number {
  key: ID
  connection: OffersConnection
}

type OffersConnectionPlace {
  key: String
  connection: OffersConnection
}

type OffersConnectionStatus {
  key: Boolean
  connection: OffersConnection
}

type OffersConnectionTitle_ar {
  key: String
  connection: OffersConnection
}

type OffersConnectionTitle_en {
  key: String
  connection: OffersConnection
}

type OffersConnectionUpdated_at {
  key: DateTime
  connection: OffersConnection
}

type OffersConnectionUpdated_by {
  key: ID
  connection: OffersConnection
}

type OffersGroupBy {
  id: [OffersConnectionId]
  created_at: [OffersConnectionCreated_at]
  updated_at: [OffersConnectionUpdated_at]
  title_en: [OffersConnectionTitle_en]
  title_ar: [OffersConnectionTitle_ar]
  discount: [OffersConnectionDiscount]
  desc_en: [OffersConnectionDesc_en]
  desc_ar: [OffersConnectionDesc_ar]
  country: [OffersConnectionCountry]
  city: [OffersConnectionCity]
  expiry: [OffersConnectionExpiry]
  mobile_number: [OffersConnectionMobile_number]
  latitude: [OffersConnectionLatitude]
  longitude: [OffersConnectionLongitude]
  status: [OffersConnectionStatus]
  actual_price: [OffersConnectionActual_price]
  discounted_price: [OffersConnectionDiscounted_price]
  place: [OffersConnectionPlace]
  featured_img: [OffersConnectionFeatured_img]
  center: [OffersConnectionCenter]
  created_by: [OffersConnectionCreated_by]
  updated_by: [OffersConnectionUpdated_by]
}

type OffersInfo {
  title_en: String
  title_ar: String
  original_price: Int
  discounted_price: Int
  discount: Int
}

type Partner {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String
  email: String
  password: String
  mobile_number: Long
  center: Centers
  created_by: AdminUser
  updated_by: AdminUser
}

type PartnerAggregator {
  count: Int
  totalCount: Int
}

type PartnerConnection {
  values: [Partner]
  groupBy: PartnerGroupBy
  aggregate: PartnerAggregator
}

type PartnerConnectionCenter {
  key: ID
  connection: PartnerConnection
}

type PartnerConnectionCreated_at {
  key: DateTime
  connection: PartnerConnection
}

type PartnerConnectionCreated_by {
  key: ID
  connection: PartnerConnection
}

type PartnerConnectionEmail {
  key: String
  connection: PartnerConnection
}

type PartnerConnectionId {
  key: ID
  connection: PartnerConnection
}

type PartnerConnectionMobile_number {
  key: ID
  connection: PartnerConnection
}

type PartnerConnectionPassword {
  key: String
  connection: PartnerConnection
}

type PartnerConnectionUpdated_at {
  key: DateTime
  connection: PartnerConnection
}

type PartnerConnectionUpdated_by {
  key: ID
  connection: PartnerConnection
}

type PartnerConnectionUsername {
  key: String
  connection: PartnerConnection
}

type PartnerGroupBy {
  id: [PartnerConnectionId]
  created_at: [PartnerConnectionCreated_at]
  updated_at: [PartnerConnectionUpdated_at]
  username: [PartnerConnectionUsername]
  email: [PartnerConnectionEmail]
  password: [PartnerConnectionPassword]
  mobile_number: [PartnerConnectionMobile_number]
  center: [PartnerConnectionCenter]
  created_by: [PartnerConnectionCreated_by]
  updated_by: [PartnerConnectionUpdated_by]
}

input PartnerInput {
  username: String
  email: String
  password: String
  mobile_number: Long
  center: ID
  created_by: ID
  updated_by: ID
}

input PartnerLoginInput {
  email: String!
  password: String!
}

type PartnerLoginPaylod {
  jwt: String
  user: Partner!
}

type PrivacyPolicy {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  privacy_en: String
  privacy_ar: String
  created_by: AdminUser
  updated_by: AdminUser
}

input PrivacyPolicyInput {
  privacy_en: String
  privacy_ar: String
  created_by: ID
  updated_by: ID
}

input ProductInput {
  title_en: String
  title_ar: String
  worth_of: Float
  desc_en: String
  desc_ar: String
  featured_imgs: [ID]
  status: Boolean
  created_by: ID
  updated_by: ID
}

type Products {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title_en: String
  title_ar: String
  worth_of: Float
  desc_en: String
  desc_ar: String
  status: Boolean
  created_by: AdminUser
  updated_by: AdminUser
  featured_imgs(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type ProductsAggregator {
  count: Int
  totalCount: Int
  sum: ProductsAggregatorSum
  avg: ProductsAggregatorAvg
  min: ProductsAggregatorMin
  max: ProductsAggregatorMax
}

type ProductsAggregatorAvg {
  worth_of: Float
}

type ProductsAggregatorMax {
  worth_of: Float
}

type ProductsAggregatorMin {
  worth_of: Float
}

type ProductsAggregatorSum {
  worth_of: Float
}

type ProductsConnection {
  values: [Products]
  groupBy: ProductsGroupBy
  aggregate: ProductsAggregator
}

type ProductsConnectionCreated_at {
  key: DateTime
  connection: ProductsConnection
}

type ProductsConnectionCreated_by {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionDesc_ar {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionDesc_en {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionId {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionStatus {
  key: Boolean
  connection: ProductsConnection
}

type ProductsConnectionTitle_ar {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionTitle_en {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionUpdated_at {
  key: DateTime
  connection: ProductsConnection
}

type ProductsConnectionUpdated_by {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionWorth_of {
  key: Float
  connection: ProductsConnection
}

type ProductsGroupBy {
  id: [ProductsConnectionId]
  created_at: [ProductsConnectionCreated_at]
  updated_at: [ProductsConnectionUpdated_at]
  title_en: [ProductsConnectionTitle_en]
  title_ar: [ProductsConnectionTitle_ar]
  worth_of: [ProductsConnectionWorth_of]
  desc_en: [ProductsConnectionDesc_en]
  desc_ar: [ProductsConnectionDesc_ar]
  status: [ProductsConnectionStatus]
  created_by: [ProductsConnectionCreated_by]
  updated_by: [ProductsConnectionUpdated_by]
}

type Query {
  appBasicInformation: AppBasicInformation
  banner(id: ID!): Banners
  banners(sort: String, limit: Int, start: Int, where: JSON): [Banners]
  bannersConnection(sort: String, limit: Int, start: Int, where: JSON): BannersConnection
  basicMembershipAmount: BasicMembershipAmount
  category(id: ID!): Categories
  categories(sort: String, limit: Int, start: Int, where: JSON): [Categories]
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CategoriesConnection
  centerCheckIn(id: ID!): CenterCheckIn
  centerCheckIns(sort: String, limit: Int, start: Int, where: JSON): [CenterCheckIn]
  centerCheckInsConnection(sort: String, limit: Int, start: Int, where: JSON): CenterCheckInConnection
  center(id: ID!): Centers
  centers(sort: String, limit: Int, start: Int, where: JSON): [Centers]
  centersConnection(sort: String, limit: Int, start: Int, where: JSON): CentersConnection
  favourite(id: ID!): Favourites
  favourites(sort: String, limit: Int, start: Int, where: JSON): [Favourites]
  favouritesConnection(sort: String, limit: Int, start: Int, where: JSON): FavouritesConnection
  giftAvailed(id: ID!): GiftAvailed
  giftAvaileds(sort: String, limit: Int, start: Int, where: JSON): [GiftAvailed]
  giftAvailedsConnection(sort: String, limit: Int, start: Int, where: JSON): GiftAvailedConnection
  giftType(id: ID!): GiftType
  giftTypes(sort: String, limit: Int, start: Int, where: JSON): [GiftType]
  giftTypesConnection(sort: String, limit: Int, start: Int, where: JSON): GiftTypeConnection
  gift(id: ID!): Gifts
  gifts(sort: String, limit: Int, start: Int, where: JSON): [Gifts]
  giftsConnection(sort: String, limit: Int, start: Int, where: JSON): GiftsConnection
  membershipBenefit: MembershipBenefits
  membershipCardInfo: MembershipCardInfo
  membershipPlan(id: ID!): MembershipPlans
  membershipPlans(sort: String, limit: Int, start: Int, where: JSON): [MembershipPlans]
  membershipPlansConnection(sort: String, limit: Int, start: Int, where: JSON): MembershipPlansConnection
  membershipTransaction(id: ID!): MembershipTransactions
  membershipTransactions(sort: String, limit: Int, start: Int, where: JSON): [MembershipTransactions]
  membershipTransactionsConnection(sort: String, limit: Int, start: Int, where: JSON): MembershipTransactionsConnection
  membership(id: ID!): Membership
  memberships(sort: String, limit: Int, start: Int, where: JSON): [Membership]
  membershipsConnection(sort: String, limit: Int, start: Int, where: JSON): MembershipConnection
  notification(id: ID!): Notifications
  notifications(sort: String, limit: Int, start: Int, where: JSON): [Notifications]
  notificationsConnection(sort: String, limit: Int, start: Int, where: JSON): NotificationsConnection
  offer(id: ID!): Offers
  offers(sort: String, limit: Int, start: Int, where: JSON): [Offers]
  offersConnection(sort: String, limit: Int, start: Int, where: JSON): OffersConnection
  partner(id: ID!): Partner
  partners(sort: String, limit: Int, start: Int, where: JSON): [Partner]
  partnersConnection(sort: String, limit: Int, start: Int, where: JSON): PartnerConnection
  privacyPolicy: PrivacyPolicy
  product(id: ID!): Products
  products(sort: String, limit: Int, start: Int, where: JSON): [Products]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductsConnection
  specialistHelp: SpecialistHelp
  specialist(id: ID!): Specialist
  specialists(sort: String, limit: Int, start: Int, where: JSON): [Specialist]
  specialistsConnection(sort: String, limit: Int, start: Int, where: JSON): SpecialistConnection
  termsAndCondition: TermsAndConditions
  voucherAvailed(id: ID!): VoucherAvailed
  voucherAvaileds(sort: String, limit: Int, start: Int, where: JSON): [VoucherAvailed]
  voucherAvailedsConnection(sort: String, limit: Int, start: Int, where: JSON): VoucherAvailedConnection
  voucherRule: VoucherRules
  voucher(id: ID!): Vouchers
  vouchers(sort: String, limit: Int, start: Int, where: JSON): [Vouchers]
  vouchersConnection(sort: String, limit: Int, start: Int, where: JSON): VouchersConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  categoriesWithCenterCount(specialist: Boolean): JSON!
  getMembershipInfo(serial: String!, where: JSON): GetMembershipInfo!
  getuserCheckinDetails(user_id: Int, where: JSON): OfferandUserInfo!
  CenterCheckinByTransactionId(transaction_id: String!): UserandCenterCheckin!
  RecentUsers(center_id: Int!): [CenterCheckIn]!
  getOffers(center_id: Int!): [Offers]!
  UserCheckins(center_id: Int!): [CenterCheckIn]
  getCenterHomeData(center_id: Int!): CenterProfile!
  topCenters(where: JSON): JSON!
  AvailableGifts(where: JSON): UserGifts!
  offerListWithFavourites(where: JSON, user_id: Int): JSON!
  offerIsFavourite(id: Int, user_id: Int): Boolean!
  favouritesByUser(user_id: Int!): [Offers]
  AvailableVouchers(where: JSON): AvailableVouchers!
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

type Specialist {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name_en: String
  name_ar: String
  desc_en: String
  desc_ar: String
  mobile_number: Long
  category: Categories
  center: Centers
  featured_img: UploadFile
  specialization_en: String
  specialization_ar: String
  created_by: AdminUser
  updated_by: AdminUser
}

type SpecialistAggregator {
  count: Int
  totalCount: Int
}

type SpecialistConnection {
  values: [Specialist]
  groupBy: SpecialistGroupBy
  aggregate: SpecialistAggregator
}

type SpecialistConnectionCategory {
  key: ID
  connection: SpecialistConnection
}

type SpecialistConnectionCenter {
  key: ID
  connection: SpecialistConnection
}

type SpecialistConnectionCreated_at {
  key: DateTime
  connection: SpecialistConnection
}

type SpecialistConnectionCreated_by {
  key: ID
  connection: SpecialistConnection
}

type SpecialistConnectionDesc_ar {
  key: String
  connection: SpecialistConnection
}

type SpecialistConnectionDesc_en {
  key: String
  connection: SpecialistConnection
}

type SpecialistConnectionFeatured_img {
  key: ID
  connection: SpecialistConnection
}

type SpecialistConnectionId {
  key: ID
  connection: SpecialistConnection
}

type SpecialistConnectionMobile_number {
  key: ID
  connection: SpecialistConnection
}

type SpecialistConnectionName_ar {
  key: String
  connection: SpecialistConnection
}

type SpecialistConnectionName_en {
  key: String
  connection: SpecialistConnection
}

type SpecialistConnectionSpecialization_ar {
  key: String
  connection: SpecialistConnection
}

type SpecialistConnectionSpecialization_en {
  key: String
  connection: SpecialistConnection
}

type SpecialistConnectionUpdated_at {
  key: DateTime
  connection: SpecialistConnection
}

type SpecialistConnectionUpdated_by {
  key: ID
  connection: SpecialistConnection
}

type SpecialistGroupBy {
  id: [SpecialistConnectionId]
  created_at: [SpecialistConnectionCreated_at]
  updated_at: [SpecialistConnectionUpdated_at]
  name_en: [SpecialistConnectionName_en]
  name_ar: [SpecialistConnectionName_ar]
  desc_en: [SpecialistConnectionDesc_en]
  desc_ar: [SpecialistConnectionDesc_ar]
  mobile_number: [SpecialistConnectionMobile_number]
  category: [SpecialistConnectionCategory]
  center: [SpecialistConnectionCenter]
  featured_img: [SpecialistConnectionFeatured_img]
  specialization_en: [SpecialistConnectionSpecialization_en]
  specialization_ar: [SpecialistConnectionSpecialization_ar]
  created_by: [SpecialistConnectionCreated_by]
  updated_by: [SpecialistConnectionUpdated_by]
}

type SpecialistHelp {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title_en: String
  title_ar: String
  featured_img: UploadFile
  created_by: AdminUser
  updated_by: AdminUser
}

input SpecialistHelpInput {
  title_en: String
  title_ar: String
  featured_img: ID
  created_by: ID
  updated_by: ID
}

input SpecialistInput {
  name_en: String
  name_ar: String
  desc_en: String
  desc_ar: String
  mobile_number: Long
  category: ID
  center: ID
  featured_img: ID
  specialization_en: String
  specialization_ar: String
  created_by: ID
  updated_by: ID
}

input TermsAndConditionInput {
  terms_en: String
  terms_ar: String
  created_by: ID
  updated_by: ID
}

type TermsAndConditions {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  terms_en: String
  terms_ar: String
  created_by: AdminUser
  updated_by: AdminUser
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateAppBasicInformationInput {
  data: editAppBasicInformationInput
}

type updateAppBasicInformationPayload {
  appBasicInformation: AppBasicInformation
}

input updateBannerInput {
  where: InputID
  data: editBannerInput
}

type updateBannerPayload {
  banner: Banners
}

input updateBasicMembershipAmountInput {
  data: editBasicMembershipAmountInput
}

type updateBasicMembershipAmountPayload {
  basicMembershipAmount: BasicMembershipAmount
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Categories
}

input updateCenterCheckInInput {
  where: InputID
  data: editCenterCheckInInput
}

type updateCenterCheckInPayload {
  centerCheckIn: CenterCheckIn
}

input updateCenterInput {
  where: InputID
  data: editCenterInput
}

type updateCenterPayload {
  center: Centers
}

input updateFavouriteInput {
  where: InputID
  data: editFavouriteInput
}

type updateFavouritePayload {
  favourite: Favourites
}

input updateGiftAvailedInput {
  where: InputID
  data: editGiftAvailedInput
}

type updateGiftAvailedPayload {
  giftAvailed: GiftAvailed
}

input updateGiftInput {
  where: InputID
  data: editGiftInput
}

type updateGiftPayload {
  gift: Gifts
}

input updateGiftTypeInput {
  where: InputID
  data: editGiftTypeInput
}

type updateGiftTypePayload {
  giftType: GiftType
}

input updateMembershipBenefitInput {
  data: editMembershipBenefitInput
}

type updateMembershipBenefitPayload {
  membershipBenefit: MembershipBenefits
}

input updateMembershipCardInfoInput {
  data: editMembershipCardInfoInput
}

type updateMembershipCardInfoPayload {
  membershipCardInfo: MembershipCardInfo
}

input updateMembershipInput {
  where: InputID
  data: editMembershipInput
}

type updateMembershipPayload {
  membership: Membership
}

input updateMembershipPlanInput {
  where: InputID
  data: editMembershipPlanInput
}

type updateMembershipPlanPayload {
  membershipPlan: MembershipPlans
}

input updateMembershipTransactionInput {
  where: InputID
  data: editMembershipTransactionInput
}

type updateMembershipTransactionPayload {
  membershipTransaction: MembershipTransactions
}

input updateNotificationInput {
  where: InputID
  data: editNotificationInput
}

type updateNotificationPayload {
  notification: Notifications
}

input updateOfferInput {
  where: InputID
  data: editOfferInput
}

type updateOfferPayload {
  offer: Offers
}

input updatePartnerInput {
  where: InputID
  data: editPartnerInput
}

type updatePartnerPayload {
  partner: Partner
}

input updatePrivacyPolicyInput {
  data: editPrivacyPolicyInput
}

type updatePrivacyPolicyPayload {
  privacyPolicy: PrivacyPolicy
}

input updateProductInput {
  where: InputID
  data: editProductInput
}

type updateProductPayload {
  product: Products
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSpecialistHelpInput {
  data: editSpecialistHelpInput
}

type updateSpecialistHelpPayload {
  specialistHelp: SpecialistHelp
}

input updateSpecialistInput {
  where: InputID
  data: editSpecialistInput
}

type updateSpecialistPayload {
  specialist: Specialist
}

input updateTermsAndConditionInput {
  data: editTermsAndConditionInput
}

type updateTermsAndConditionPayload {
  termsAndCondition: TermsAndConditions
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input updateVoucherAvailedInput {
  where: InputID
  data: editVoucherAvailedInput
}

type updateVoucherAvailedPayload {
  voucherAvailed: VoucherAvailed
}

input updateVoucherInput {
  where: InputID
  data: editVoucherInput
}

type updateVoucherPayload {
  voucher: Vouchers
}

input updateVoucherRuleInput {
  data: editVoucherRuleInput
}

type updateVoucherRulePayload {
  voucherRule: VoucherRules
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  created_by: AdminUser
  updated_by: AdminUser
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_by {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_by {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  created_by: [UploadFileConnectionCreated_by]
  updated_by: [UploadFileConnectionUpdated_by]
}

type UserandCenterCheckin {
  userInfo: UserInfo
  offers: [OffersInfo]
}

type UserGifts {
  gifts: [Gifts]
  AvailedGifts: [GiftAvailed]
}

type UserInfo {
  username: String
  email: String
  mobile_number: Long
  created_at: DateTime
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  language: String
  notification_token: String
  mobile_number: Long
  favourites: String
  dob: Date
  birthday: DateTime
  platform: String
  app_version: String
  center_check_ins: [ID]
  favourite: [ID]
  created_by: ID
  updated_by: ID
}

type UserPayload {
  id: Int!
  username: String
  checked_in: DateTime
  transaction_id: String
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  created_by: AdminUser
  updated_by: AdminUser
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  created_by: AdminUser
  updated_by: AdminUser
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionCreated_by {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionUpdated_by {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
  created_by: [UsersPermissionsRoleConnectionCreated_by]
  updated_by: [UsersPermissionsRoleConnectionUpdated_by]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  language: String
  notification_token: String
  mobile_number: Long
  favourites: String
  dob: Date
  birthday: DateTime
  platform: String
  app_version: String
  created_by: AdminUser
  updated_by: AdminUser
  center_check_ins(sort: String, limit: Int, start: Int, where: JSON): [CenterCheckIn]
  favourite(sort: String, limit: Int, start: Int, where: JSON): [Favourites]
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionApp_version {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBirthday {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_by {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionDob {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionFavourites {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionLanguage {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionMobile_number {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionNotification_token {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionPlatform {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_by {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  language: [UsersPermissionsUserConnectionLanguage]
  notification_token: [UsersPermissionsUserConnectionNotification_token]
  mobile_number: [UsersPermissionsUserConnectionMobile_number]
  favourites: [UsersPermissionsUserConnectionFavourites]
  dob: [UsersPermissionsUserConnectionDob]
  birthday: [UsersPermissionsUserConnectionBirthday]
  platform: [UsersPermissionsUserConnectionPlatform]
  app_version: [UsersPermissionsUserConnectionApp_version]
  created_by: [UsersPermissionsUserConnectionCreated_by]
  updated_by: [UsersPermissionsUserConnectionUpdated_by]
}

type UserVoucher {
  disabled: Boolean
  won: Boolean!
  voucher: Vouchers
}

type VoucherAvailed {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  voucher_id: Vouchers
  user_id: UsersPermissionsUser
  featured_img: UploadFile
  membership_plan: MembershipPlans
  buy_title_en: String
  buy_title_ar: String
  win_title_en: String
  win_title_ar: String
  desc_an: String
  desc_ar: String
  is_won: Boolean
  created_by: AdminUser
  updated_by: AdminUser
  product_ids(sort: String, limit: Int, start: Int, where: JSON): [Products]
  gift_ids(sort: String, limit: Int, start: Int, where: JSON): [Gifts]
}

type VoucherAvailedAggregator {
  count: Int
  totalCount: Int
}

type VoucherAvailedConnection {
  values: [VoucherAvailed]
  groupBy: VoucherAvailedGroupBy
  aggregate: VoucherAvailedAggregator
}

type VoucherAvailedConnectionBuy_title_ar {
  key: String
  connection: VoucherAvailedConnection
}

type VoucherAvailedConnectionBuy_title_en {
  key: String
  connection: VoucherAvailedConnection
}

type VoucherAvailedConnectionCreated_at {
  key: DateTime
  connection: VoucherAvailedConnection
}

type VoucherAvailedConnectionCreated_by {
  key: ID
  connection: VoucherAvailedConnection
}

type VoucherAvailedConnectionDesc_an {
  key: String
  connection: VoucherAvailedConnection
}

type VoucherAvailedConnectionDesc_ar {
  key: String
  connection: VoucherAvailedConnection
}

type VoucherAvailedConnectionFeatured_img {
  key: ID
  connection: VoucherAvailedConnection
}

type VoucherAvailedConnectionId {
  key: ID
  connection: VoucherAvailedConnection
}

type VoucherAvailedConnectionIs_won {
  key: Boolean
  connection: VoucherAvailedConnection
}

type VoucherAvailedConnectionMembership_plan {
  key: ID
  connection: VoucherAvailedConnection
}

type VoucherAvailedConnectionUpdated_at {
  key: DateTime
  connection: VoucherAvailedConnection
}

type VoucherAvailedConnectionUpdated_by {
  key: ID
  connection: VoucherAvailedConnection
}

type VoucherAvailedConnectionUser_id {
  key: ID
  connection: VoucherAvailedConnection
}

type VoucherAvailedConnectionVoucher_id {
  key: ID
  connection: VoucherAvailedConnection
}

type VoucherAvailedConnectionWin_title_ar {
  key: String
  connection: VoucherAvailedConnection
}

type VoucherAvailedConnectionWin_title_en {
  key: String
  connection: VoucherAvailedConnection
}

type VoucherAvailedGroupBy {
  id: [VoucherAvailedConnectionId]
  created_at: [VoucherAvailedConnectionCreated_at]
  updated_at: [VoucherAvailedConnectionUpdated_at]
  voucher_id: [VoucherAvailedConnectionVoucher_id]
  user_id: [VoucherAvailedConnectionUser_id]
  featured_img: [VoucherAvailedConnectionFeatured_img]
  membership_plan: [VoucherAvailedConnectionMembership_plan]
  buy_title_en: [VoucherAvailedConnectionBuy_title_en]
  buy_title_ar: [VoucherAvailedConnectionBuy_title_ar]
  win_title_en: [VoucherAvailedConnectionWin_title_en]
  win_title_ar: [VoucherAvailedConnectionWin_title_ar]
  desc_an: [VoucherAvailedConnectionDesc_an]
  desc_ar: [VoucherAvailedConnectionDesc_ar]
  is_won: [VoucherAvailedConnectionIs_won]
  created_by: [VoucherAvailedConnectionCreated_by]
  updated_by: [VoucherAvailedConnectionUpdated_by]
}

input VoucherAvailedInput {
  voucher_id: ID
  user_id: ID
  featured_img: ID
  membership_plan: ID
  buy_title_en: String
  buy_title_ar: String
  win_title_en: String
  win_title_ar: String
  desc_an: String
  desc_ar: String
  product_ids: [ID]
  gift_ids: [ID]
  is_won: Boolean
  created_by: ID
  updated_by: ID
}

input VoucherInput {
  buy_title_en: String
  buy_title_ar: String
  win_title_en: String
  win_title_ar: String
  desc_en: String
  desc_ar: String
  featured_img: ID
  product_id: [ID]
  assured_gift_id: [ID]
  cost: Float
  status: Boolean
  minimum_subscription_limit: Int
  users_subscribed: Long
  expiry: DateTime
  membership_plans: [ID]
  created_by: ID
  updated_by: ID
}

input VoucherRuleInput {
  text_en: String
  text_ar: String
  created_by: ID
  updated_by: ID
}

type VoucherRules {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  text_en: String
  text_ar: String
  created_by: AdminUser
  updated_by: AdminUser
}

type Vouchers {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  buy_title_en: String
  buy_title_ar: String
  win_title_en: String
  win_title_ar: String
  desc_en: String
  desc_ar: String
  featured_img: UploadFile
  cost: Float
  status: Boolean
  minimum_subscription_limit: Int
  users_subscribed: Long
  expiry: DateTime
  created_by: AdminUser
  updated_by: AdminUser
  product_id(sort: String, limit: Int, start: Int, where: JSON): [Products]
  assured_gift_id(sort: String, limit: Int, start: Int, where: JSON): [Gifts]
  membership_plans(sort: String, limit: Int, start: Int, where: JSON): [MembershipPlans]
}

type VouchersAggregator {
  count: Int
  totalCount: Int
  sum: VouchersAggregatorSum
  avg: VouchersAggregatorAvg
  min: VouchersAggregatorMin
  max: VouchersAggregatorMax
}

type VouchersAggregatorAvg {
  cost: Float
  minimum_subscription_limit: Float
}

type VouchersAggregatorMax {
  cost: Float
  minimum_subscription_limit: Float
}

type VouchersAggregatorMin {
  cost: Float
  minimum_subscription_limit: Float
}

type VouchersAggregatorSum {
  cost: Float
  minimum_subscription_limit: Float
}

type VouchersConnection {
  values: [Vouchers]
  groupBy: VouchersGroupBy
  aggregate: VouchersAggregator
}

type VouchersConnectionBuy_title_ar {
  key: String
  connection: VouchersConnection
}

type VouchersConnectionBuy_title_en {
  key: String
  connection: VouchersConnection
}

type VouchersConnectionCost {
  key: Float
  connection: VouchersConnection
}

type VouchersConnectionCreated_at {
  key: DateTime
  connection: VouchersConnection
}

type VouchersConnectionCreated_by {
  key: ID
  connection: VouchersConnection
}

type VouchersConnectionDesc_ar {
  key: String
  connection: VouchersConnection
}

type VouchersConnectionDesc_en {
  key: String
  connection: VouchersConnection
}

type VouchersConnectionExpiry {
  key: DateTime
  connection: VouchersConnection
}

type VouchersConnectionFeatured_img {
  key: ID
  connection: VouchersConnection
}

type VouchersConnectionId {
  key: ID
  connection: VouchersConnection
}

type VouchersConnectionMinimum_subscription_limit {
  key: Int
  connection: VouchersConnection
}

type VouchersConnectionStatus {
  key: Boolean
  connection: VouchersConnection
}

type VouchersConnectionUpdated_at {
  key: DateTime
  connection: VouchersConnection
}

type VouchersConnectionUpdated_by {
  key: ID
  connection: VouchersConnection
}

type VouchersConnectionUsers_subscribed {
  key: ID
  connection: VouchersConnection
}

type VouchersConnectionWin_title_ar {
  key: String
  connection: VouchersConnection
}

type VouchersConnectionWin_title_en {
  key: String
  connection: VouchersConnection
}

type VouchersGroupBy {
  id: [VouchersConnectionId]
  created_at: [VouchersConnectionCreated_at]
  updated_at: [VouchersConnectionUpdated_at]
  buy_title_en: [VouchersConnectionBuy_title_en]
  buy_title_ar: [VouchersConnectionBuy_title_ar]
  win_title_en: [VouchersConnectionWin_title_en]
  win_title_ar: [VouchersConnectionWin_title_ar]
  desc_en: [VouchersConnectionDesc_en]
  desc_ar: [VouchersConnectionDesc_ar]
  featured_img: [VouchersConnectionFeatured_img]
  cost: [VouchersConnectionCost]
  status: [VouchersConnectionStatus]
  minimum_subscription_limit: [VouchersConnectionMinimum_subscription_limit]
  users_subscribed: [VouchersConnectionUsers_subscribed]
  expiry: [VouchersConnectionExpiry]
  created_by: [VouchersConnectionCreated_by]
  updated_by: [VouchersConnectionUpdated_by]
}

type VouchersPayLoad {
  VoucherBought: VoucherAvailed
}
